## NEED CHANGE (defines the user of the nginx workers)
# user user group;

##Â THIS PARAMETERS BE SAFELY OVER RIDDEN BY YOUR DEFAULT NGINX CONF
worker_processes  2;
env THREESCALE_DEPLOYMENT_ENV;
# error_log stderr notice;
# daemon off;
# error_log logs/error.log warn;
events {
    worker_connections 256;
}

http {
  lua_shared_dict api_keys 10m;
  server_names_hash_bucket_size 128;
  lua_package_path ";;$prefix/?.lua;$prefix/conf/?.lua";
  init_by_lua 'math.randomseed(ngx.time()) ; cjson = require("cjson")';
  
  resolver 8.8.8.8 8.8.4.4;

  upstream backend_CHANGE_ME_API_BACKEND {
    # service name: CHANGE_ME_SERVICE_NAME ;
    server CHANGE_ME_API_BACKEND:CHANGE_ME_PORT max_fails=5 fail_timeout=30;
  }

  upstream backend_CHANGE_ME_IDP_BACKEND {
    server CHANGE_ME_IDP_BACKEND:CHANGE_ME_PORT max_fails=5 fail_timeout=30;
  }

  server {
    # Enabling the Lua code cache is strongly encouraged for production use. Here it is enabled by default for testing and development purposes
    lua_code_cache off;
    listen 80;
    ## CHANGE YOUR SERVER_NAME TO YOUR CUSTOM DOMAIN OR LEAVE IT BLANK IF ONLY HAVE ONE
    server_name CHANGE_ME_SERVER_NAME;
    underscores_in_headers on;
    set_by_lua $deployment 'return os.getenv("THREESCALE_DEPLOYMENT_ENV")';
    set $threescale_backend "https://su1.3scale.net:443";

    location = /_threescale/check_credentials {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host "su1.3scale.net"; #needed. backend discards other hosts

      set $provider_key CHANGE_ME_PROVIDER_KEY;
      set $service_id CHANGE_ME_SERVICE_ID;

      proxy_pass $threescale_backend/transactions/oauth_authorize.xml?provider_key=$provider_key&service_id=$service_id&$args;
    }

    location /oauth/token  {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      proxy_set_header  Content-Type "application/x-www-form-urlencoded";

      set $provider_key CHANGE_ME_PROVIDER_KEY;

      content_by_lua_file get_token.lua;
    }

    location = /_oauth/token {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      more_clear_input_headers Accept-Encoding;

      proxy_redirect    off;
      proxy_max_temp_file_size 0;

      proxy_method POST;
      proxy_pass https://CHANGE_ME_IDP_BACKEND/CHANGE_ME_TOKEN_ENDPOINT;
    }
    
    location = /_threescale/oauth_store_token {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host "su1.3scale.net"; #needed. backend discards other hosts

      set $provider_key CHANGE_ME_PROVIDER_KEY;
      set $service_id CHANGE_ME_SERVICE_ID;

      proxy_method POST;
      proxy_pass $threescale_backend/services/$service_id/oauth_access_tokens.xml;
    }

    location /threescale_oauth_authorize {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host "su1.3scale.net";

      set $provider_key CHANGE_ME_PROVIDER_KEY;
      set $service_id CHANGE_ME_SERVICE_ID;

      proxy_ignore_client_abort on;
      proxy_pass $threescale_backend/transactions/oauth_authorize.xml?provider_key=$provider_key&service_id=$service_id&access_token=$arg_access_token&$usage;
    }

    location /threescale_oauth_report {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host "su1.3scale.net";

      set $provider_key CHANGE_ME_PROVIDER_KEY;
      set $service_id CHANGE_ME_SERVICE_ID;

      proxy_method POST;
      proxy_pass $threescale_backend/transactions.xml?provider_key=$provider_key&service_id=$service_id&transactions[0][access_token]=$arg_access_token&$usage&transactions[0][log][code]=$arg_code;
    }

    location = /threescale_oauth_authrep {
      internal;
      proxy_set_header  Host  "su1.3scale.net";
      proxy_set_header  X-3scale-User-Agent "nginx$deployment";
      proxy_set_header  X-3scale-OAuth2-Grant-Type "client_credentials";

      set $provider_key CHANGE_ME_PROVIDER_KEY;
      set $service_id CHANGE_ME_SERVICE_ID;

      proxy_pass $threescale_backend/transactions/oauth_authrep.xml?provider_key=$provider_key&service_id=$service_id&$usage&$credentials&log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
    }

    location = /threescale_authrep {
      internal;
      set $provider_key CHANGE_ME_PROVIDER_KEY;

      proxy_pass $threescale_backend/transactions/authrep.xml?provider_key=$provider_key&service_id=$service_id&$usage&$credentials&log%5Bcode%5D=$arg_code&log%5Brequest%5D=$arg_req&log%5Bresponse%5D=$arg_resp;
      proxy_set_header  Host  "su1.3scale.net";
      proxy_set_header  X-3scale-User-Agent "nginx$deployment";
    }

    location = /out_of_band_oauth_authrep_action {
      internal;
      proxy_pass_request_headers off;
      ##set $provider_key "YOUR_3SCALE_PROVIDER_KEY";
      ##needs to be in both places, better not to have it on location / for potential security issues, req. are internal
      set $provider_key CHANGE_ME_PROVIDER_KEY;


      content_by_lua "require('nginx').post_action_content()";
    }

    location / {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $service_id CHANGE_ME_SERVICE_ID;
      set $proxy_pass null;
      set $secret_token null;
      set $resp_body null;
      set $resp_headers null;
      set $access_token null;

      proxy_ignore_client_abort on;

      ## CHANGE THE PATH TO POINT TO THE RIGHT FILE ON YOUR FILESYSTEM IF NEEDED
      access_by_lua "require('nginx').access()";

      body_filter_by_lua  'ngx.ctx.buffered = (ngx.ctx.buffered or "") .. string.sub(ngx.arg[1], 1, 1000)
                           if ngx.arg[2] then ngx.var.resp_body = ngx.ctx.buffered end';
      header_filter_by_lua 'ngx.var.resp_headers = cjson.encode(ngx.resp.get_headers())';

      proxy_pass $proxy_pass ;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host  $host;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;

      post_action /out_of_band_oauth_authrep_action;
    }
  }
}
